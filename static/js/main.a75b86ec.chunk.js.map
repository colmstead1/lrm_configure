{"version":3,"sources":["components/Login.js","serviceWorker.js","components/Nav.js","components/Logout.js","components/ChooseEmotion.js","components/ChoosePlaylist.js","components/MyPlaylist.js","components/EditPlaylist.js","components/SearchBar.js","components/NotFound.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","Login","loginWithGoogle","auth","currentUser","provider","GoogleAuthProvider","signInWithPopup","then","result","credential","accessToken","user","console","log","displayName","catch","error","errorCode","code","message","email","alert","loginWithYoutube","onClick","this","className","to","id","href","target","Component","Boolean","window","location","hostname","match","Nav","toggleNav","$","toggle","Logout","signOut","ChooseEmotion","React","ChoosePlaylist","MyPlaylist","EditPlaylist","SearchBar","NotFound","render","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a75b86ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyBzJBtAEkdlvIZZOEEG_Ahp85w5SnDh1WE\",\n    authDomain: \"my-emotionality-1582062572092.firebaseapp.com\",\n    databaseURL: \"https://my-emotionality-1582062572092.firebaseio.com\",\n    //projectId: \"my-emotionality-1582062572092\",\n    storageBucket: \"my-emotionality-1582062572092.appspot.com\",\n    //messagingSenderId: \"1057384645203\",\n    //appId: \"1:1057384645203:web:a37932c01116a0b9b57ca6\",\n    //measurementId: \"G-15Q5TYNN34\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default class Login extends Component{\n    loginWithGoogle = () =>{\n        if (!firebase.auth().currentUser) {\n            // [START createprovider]\n            var provider = new firebase.auth.GoogleAuthProvider();\n            // [END createprovider]\n            // [START addscopes]\n            firebase.auth().signInWithPopup(provider).then(function(result) {\n                // This gives you a Google Access Token. You can use it to access the Google API.\n                var token = result.credential.accessToken;\n                // The signed-in user info.\n                var user = result.user;\n                console.log(\"login: \", user);\n                console.log(\"Welcome, \", user.displayName);\n            }).catch(function(error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                // The email of the user's account used.\n                var email = error.email;\n                // The firebase.auth.AuthCredential type that was used.\n                var credential = error.credential;\n                // [START_EXCLUDE]\n                if (errorCode === 'auth/account-exists-with-different-credential') {\n                    alert('You have already signed up with a different auth provider for that email.');\n                    // If you are using multiple auth providers on your app you should handle linking\n                    // the user's accounts here.\n                } else {\n                    console.error(error);\n                }\n                // [END_EXCLUDE]\n            });\n        }\n    };\n\n    loginWithYoutube = () => {\n\n    };\n\n    render() {\n        /*let logOutButton;\n        firebase.auth().onAuthStateChanged(firebaseUser => {\n            if(firebaseUser){\n                console.log(\"firebaseUser \", firebaseUser);\n                const style = { display: 'block' };\n                logOutButton = React.createElement('button', { style }, \"Log Out\");\n                document.getElementById(\"signOutButton\").css({\"display\": \"block\"});\n            }else{\n                console.log(\"ERROR: not logged in\");\n                document.getElementById(\"signOutButton\").css({\"display\": \"none\"});\n            }\n        });*/\n        return(\n            <div>\n                <header>\n                    <h2>Login With</h2>\n                </header>\n                <div>\n                    <button onClick={this.loginWithGoogle} className=\"addButton\">Login With Google</button>\n                    <button onClick={this.loginWithYoutube} className=\"addButton\">Login With YouTube</button>\n                    <button className=\"addButton\"><Link to=\"/myEmotionality/chooseEmotion\">Next</Link></button>\n                </div>\n                <footer id=\"accountFix\">\n                    <a className=\"loginFooter\" href=\"https://accounts.google.com/signin/v2/recoveryidentifier?flowName=GlifWebSignIn&flowEntry=ServiceLogin\" target=\"_blank\">Forgot your password?</a>\n                    <a className=\"loginFooter\" href=\"https://accounts.google.com/signup/v2/webcreateaccount?flowName=GlifWebSignIn&flowEntry=SignUp\" target=\"_blank\">Create Account</a>\n                </footer>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport $ from \"jquery\";\n\nexport default class Nav extends Component {\n    toggleNav = () => {\n        $(\"nav\").toggle(\"slow\");\n    };\n    render() {\n        return(\n            <div>\n                <button id=\"navDopdown\" onClick={this.toggleNav}>&#9776;</button>\n                <nav id=\"nav\">\n                    <li><Link className=\"navItem\" to=\"/myEmotionality/chooseEmotion\">Choose Emotion</Link></li>\n                    <li><Link className=\"navItem\" to=\"/myEmotionality/choosePlaylist\">Choose Playlist</Link></li>\n                    <li><Link className=\"navItem\" to=\"/myEmotionality/editPlaylist\">Edit Playlists</Link></li>\n                </nav>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nexport default class Logout extends Component{\n    signOut = () => {\n        firebase.auth().signOut();\n        console.log(\"signed out\");\n    };\n    render() {\n        return(\n            <div>\n                <Link to=\"/myEmotionality/login\" onClick={this.signOut}><button className=\"signOutButton\">Log Out</button></Link>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport Logout from \"./Logout\";\n\nexport default class ChooseEmotion extends React.Component{\n    render() {\n        return(\n            <div>\n                <h2>Welcome User!</h2>\n                <Nav />\n                <Logout />\n                <section className=\"transparentWhite\">\n                    <h2>How are you feeling today?</h2>\n                    <section className=\"buttonSection\">\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">HAPPY</button>\n                        </Link>\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">SAD</button>\n                        </Link>\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">ANGRY</button>\n                        </Link>\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">EXCITED</button>\n                        </Link>\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">SCARED</button>\n                        </Link>\n                        <Link to=\"/myEmotionality/choosePlaylist\" className=\"circleMargin\">\n                            <button className=\"circleButton\">CONTEMPT</button>\n                        </Link>\n                    </section>\n                </section>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Nav from './Nav';\nimport Logout from \"./Logout\";\n\nexport default class ChoosePlaylist extends React.Component{\n    render() {\n        return(\n            <div>\n                <Nav />\n                <Logout />\n                <h2>[Emotion] Playlists</h2>\n                <section className=\"transparentWhite\">\n                    <h2>Choose A Playlist Type</h2>\n                    <div className=\"buttonSection\">\n                        <Link to=\"/myEmotionality/myPlaylist\" className=\"choiceButton\" id=\"music\">MUSIC</Link>\n                        <Link to=\"myEmotionality/myPlaylist\" className=\"choiceButton\" id=\"video\">VIDEO</Link>\n                        <Link to=\"/myEmotionality/myPlaylist\" className=\"choiceButton\" id=\"browse\">BROWSE</Link>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Nav from './Nav';\nimport Logout from \"./Logout\";\n\nexport default class MyPlaylist extends React.Component{\n    render() {\n        return(\n            <div>\n                <Nav />\n                <Logout />\n                <h2>[Emotion + Type] Playlist</h2>\n                <section className=\"transparentWhite buttonSection\">\n                    <Link to=\"/myEmotionality/editPlaylist\" className=\"addButton\">Edit Playlist</Link>\n                </section>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Nav from './Nav';\nimport Logout from \"./Logout\";\n\nexport default class EditPlaylist extends React.Component{\n    render() {\n        return(\n            <div>\n                <Nav />\n                <Logout />\n                <h2>Edit Playlist</h2>\n                <Link to=\"/myEmotionality/myPlaylist\" className=\"addButton\">Save Changes</Link>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nexport default class SearchBar extends React.Component{\n    render() {\n        return(\n            <div>\n                ~ Search Bar Here ~\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class NotFound extends React.Component{\n    render() {\n        return(\n            <div>\n                Page Not Found\n                <Link to=\"/myEmotionality/login\">Return To Login</Link>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport Login from './components/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Switch\n} from 'react-router-dom'\nimport ChooseEmotion from \"./components/ChooseEmotion\";\nimport ChoosePlaylist from \"./components/ChoosePlaylist\";\nimport MyPlaylist from \"./components/MyPlaylist\";\nimport EditPlaylist from \"./components/EditPlaylist\";\nimport SearchBar from \"./components/SearchBar\";\nimport NotFound from \"./components/NotFound\";\n\nrender((\n    <Router>\n            <Switch>\n                <Route exact path=\"/myEmotionality/login\">\n                    <div>\n                        <Login />\n                    </div>\n                </Route>\n                <Route path=\"/myEmotionality/chooseEmotion\">\n                    <div>\n                        <ChooseEmotion />\n                    </div>\n                </Route>\n                <Route path=\"/myEmotionality/choosePlaylist\">\n                    <div>\n                        <ChoosePlaylist />\n                    </div>\n                </Route>\n                <Route exact path=\"/myEmotionality/myPlaylist\">\n                    <div>\n                        <MyPlaylist />\n                    </div>\n                </Route>\n                <Route exact path=\"/myEmotionality/editPlaylist\">\n                    <div>\n                        <SearchBar /><br/>\n                        <EditPlaylist />\n                    </div>\n                </Route>\n                <Route>\n                    <NotFound />\n                </Route>\n            </Switch>\n    </Router>\n\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nexport * from \"react-router\";"],"sourceRoot":""}